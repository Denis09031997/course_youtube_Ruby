# свойства, геттеры и сеттеры

# Свой-во внутри метода, это переменная, которая начинается со знака '@'. Но метод одноименный - просто напросто
# возвращает значение данной переменной. Т.е когда обращаемся через переменную к этому методу, то он вернет
# нам эту переменную - этот метод называется геттером, т.е гет - получить.

# Сеттеры - сет, устанвоить. Установить некоторой переменной, те данные, которые мы устанавливаем. 

# Сеттеры и геттеры - это методы в языке программирования Ruby, которые позволяют устанавливать (записывать) 
# и получать (читать) значения переменных объекта класса. Они являются ключевой частью 
# объектно-ориентированного программирования, так как обеспечивают контроль над доступом к данным класса.



class Item
  
  def initialize # вызывается тогда, когда создаем экземпляр класса. 
    @price = 30
  end

  def price
    @price # геттер
  end

  def price=(value)
    @price = value
  end

end

item1 = Item.new
item2 = Item.new

item1.price=(10) # используем itom.price - куда поместили 10
p item1.price # Вызываем сам метод и переменную уже с этим значением

item2.price=20
p item2.price

puts '_' * 120
puts 'class Person'
puts '_' * 120

# Допустим, у нас есть класс Person, представляющий человека, и у нас есть две переменные этого класса: 
# name (имя) и age (возраст). Мы хотим иметь возможность устанавливать и получать значения этих переменных 
# с помощью методов, а не напрямую обращаться к ним. Вот где нам пригодятся сеттеры и геттеры.

# Шаги для создания сеттеров и геттеров:

# Определение класса Person.
# Определение методов-сеттеров для установки значений переменных (name= и age=).
# Определение методов-геттеров для получения значений переменных (name и age).
# Пример с объяснениями:

class Person
    # Геттер для получения значения имени
  def name
    @name
  end

    # Сеттер для установки значения имени
  def name=(new_name)
    @name = new_name
  end

    # Геттер для получения значения возраста
  def age
    @age
  end

    # Сеттер для установки значения возраста
  def age=(new_age)
    @age = new_age
  end
end

# Теперь давайте пошагово разберем, как работает код выше:

# Мы определили класс Person, который будет представлять объекты, соответствующие людям.

# Для установки значения имени мы создали метод name=. Он принимает один аргумент new_name, 
# который будет новым значением для имени человека. Внутри метода мы просто устанавливаем значение 
# переменной @name равным переданному значению new_name.

# Для получения значения имени мы создали метод name. Этот метод не принимает аргументов,
#  потому что он просто возвращает текущее значение переменной @name.

# Аналогично, для установки и получения значения возраста мы создали методы age= и age.

# Теперь давайте применим наши сеттеры и геттеры для объекта класса Person:

# Создаем объект класса Person
person = Person.new

# Используем сеттер для установки значения имени

person.name = 'Denis'
# Используем сеттер для установки значения возраста
person.age = 26

# Используем геттер для получения значения имени и выводим его
puts person.name
# Используем геттер для получения значения возраста и выводим его
puts person.age

# Как видите, мы не обращаемся напрямую к переменным @name и @age, а используем методы-сеттеры 
# и методы-геттеры для работы с этими данными. Это обеспечивает лучший контроль над доступом к
# данным объекта и упрощает поддержку и изменение кода в будущем.

# Еще пример с созданием класса, с добавлением в него атрибутов и метода.

puts '._-._' * 20
puts 'Еще пример с созданием класса, с добавлением в него атрибутов и метода'

class Person2
  
  def initialize(name2, age2)
    @name_two = name2
    @age_two = age2
  end

  def say_hello
    puts "Hello, my name is #{@name_two}, my age = #{@age_two}."
  end

end

# В приведенном коде мы добавили конструктор initialize, который автоматически вызывается при 
# создании нового объекта класса Person. Он принимает два аргумента - name и age, и устанавливает 
# их значения в переменные экземпляра @name и @age. Мы также добавили метод say_hello, 
# который выводит приветствие с именем и возрастом объекта. Метод имеет доступ к переменным 
# экземпляра @name и @age.


p1 = Person2.new('Denis', 26)
puts p1.say_hello

p2 = Person2.new('Maxim', 27)
puts p2.say_hello
