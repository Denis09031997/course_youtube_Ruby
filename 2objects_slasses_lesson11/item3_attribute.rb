# attribute readers, writers and accessors

# attr_reader:
# attr_reader позволяет создать методы для чтения (геттеры) значений экземплярных переменных класса.
# Это значит, что вы сможете получить значение этих переменных извне класса, но не сможете изменить их напрямую.

class Person
  # Создаем атрибут только для чтения name
  attr_reader :name

  def initialize(name)
    @name = name
  end

end

# Создаем объект класса Person

person = Person.new('Денис')

puts person.name

# Попытка изменения значения атрибута (не сработает)
# person.name = 'Denis'

puts '-' * 100

puts 'attr_writer:'

# attr_writer:
# attr_writer позволяет создать методы для записи (сеттеры) значений экземплярных переменных класса.
# Теперь вы сможете изменять значения этих переменных извне класса, но не сможете получить их напрямую.

class Person2
  # Создаем атрибут только для записи age
  attr_writer :age

  def initialize(age)
    @age = age
  end

end

# Создаем объект класса Person2

person2 = Person2.new(26)

# Изменяем значение атрибута age (сеттер)

person2.age = 25

# Попытка чтения значения атрибута (не сработает)
# puts person.age # Выдаст ошибку, так как у нас только сеттер


puts '_' * 100
puts 'attr_accessor: '
puts '_' * 100

# attr_accessor:
# attr_accessor позволяет создать и методы для чтения (геттеры) и методы для записи (сеттеры) 
# значений экземплярных переменных класса одновременно.
# Теперь вы сможете получать и изменять значения этих переменных извне класса.


class Person3
  # Создаем атрибут для чтения и записи name

  attr_accessor :name
  def initialize(name)
    @name = name
  end

end

# Создаем объект класса Person

person3 = Person3.new('Den4ik')

# Получаем значение атрибута name (геттер)
puts person3.name
# Изменяем значение атрибута name (сеттер)
person3.name = 'Deni$$'
puts person3.name

puts '.' * 100
puts 'Повторим def initialize'
puts '.' * 100

# В Ruby ключевое слово def initialize используется для определения конструктора класса. 
# Конструктор - это метод, который вызывается автоматически при создании нового объекта класса. 
# Он выполняет необходимую инициализацию объекта, устанавливая его начальные значения или выполняя другие 
# необходимые действия перед тем, как объект будет использован.

# Когда вы создаете новый объект с помощью ClassName.new, Ruby автоматически вызывает метод initialize, 
# если он определен в классе. Если метод initialize не определен, то объект будет создан без дополнительной
# инициализации.

class KiaRio
  
  def initialize(max_speed, petrol)
    @max_speed = max_speed
    @petrol = petrol
  end

  def say_about_my_car
    puts "Hello, my auto have max speed #{@max_speed} and consumes petrol #{@petrol}"
  end

end

# Создаем объект класса KiaRio с помощью конструктора initialize
car = KiaRio.new("220 км/ч", "95-ый экто")

# Вызываем метод say_about_my_car для каждого объекта
car.say_about_my_car

# В приведенном выше примере, когда мы создаем объекты person1 и person2, Ruby автоматически вызывает 
# метод initialize с аргументами "Алекс", 30 и "Елена", 25. Метод initialize устанавливает экземплярные 
# переменные @name и @age для каждого объекта, и теперь мы можем использовать эти значения в других методах 
# класса, таких как say_hello.

# Использование конструктора def initialize позволяет нам инициализировать объекты класса так, как нам нужно, 
# и обеспечить их корректное состояние перед использованием.